#!/usr/bin/env python3
# -*- mode: python; coding: utf-8 -*-
"""
Usage: ipmne [OPTIONS] [ARG [ARG …]]

positional arguments:
  ARG                   IPv4 address, hostname or mnemonic

optional arguments:
  -h, --help            show this help message and exit
  -v, --version         show version information and exit
  -c, --copyright       show copying policy and exit
  -N, --no-dns          do not resolve hostnames and IP addresses
  -S, --no-sort         do not sort output by IP address
  -f FORMAT, --format FORMAT
                        custom format containing one or more
                        placeholders: {ipv4}, {mnemonic}, {hostname}

Arguments are read from standard input if not provided excplicitly.

Please see http://gurno.com/adam/mne/ | https://archive.is/1wiw5
for the reason this program exists.

Please report issues at https://github.com/kseistrup/ip-mnemonics
"""
##############################################################################
# This program is free software; you can redistribute it and/or modify it    #
# under the terms of the GNU General Public License as published by the Free #
# Software Foundation; either version 3 of the License, or (at your option)  #
# any later version.                                                         #
#                                                                            #
# This program is distributed in the hope that it will be useful, but with-  #
# out any warranty; without even the implied warranty of merchantability or  #
# fitness for a particular purpose. See the GNU General Public License for   #
# more details.  <http://gplv3.fsf.org/>                                     #
##############################################################################

import sys
import pathlib
import argparse
import ipaddress

from os import environ as ENV
from pprint import pprint

try:
    from locale import (Error, setlocale, LC_ALL)
    _ = setlocale(LC_ALL, '')
except (ImportError, ModuleNotFoundError, NameError, Error):
    pass

# 3rd party modules
try:
    from dns import resolver
    HAS_DNS = USE_DNS = True
except (ImportError, ModuleNotFoundError):
    HAS_DNS = USE_DNS = False

__author__ = 'Klaus Alexander Seistrup <klaus@seistrup.dk>'
__whoami__ = 'ipmne'
__revision__ = '2017-03-07'
__version__ = '0.1.0α ({})'.format(__revision__)
__copyright__ = """\
ipmne {}
Copyright © 2017 Klaus Alexander Seistrup <klaus@seistrup.dk>

This is free software; see the source for copying conditions. There is no
warranty; not even for merchantability or fitness for a particular purpose.\
""".format(__version__)

DEBUG = ENV.get('DEBUG', 'False')[0].upper() in '1JTY'  # 1/Ja/True/Yes

EPILOG = [
    'Arguments are read from standard input if not provided excplicitly.\n\n'
    'Please see http://gurno.com/adam/mne/ | https://archive.is/1wiw5\n'
    'for the reason this program exists.\n\n'
    'Please report issues at https://github.com/kseistrup/ip-mnemonics'
]

if HAS_DNS:
    HELP_ARG = 'IPv4 address, hostname or mnemonic'
    HELP_FMT = 'custom format containing one or more\n' \
               'placeholders: {ipv4}, {mnemonic}, {hostname}'
else:
    HELP_ARG = 'IPv4 address or mnemonic'
    HELP_FMT = 'custom format containing one or more\n' \
               'placeholders: {ipv4}, {mnemonic}'
    EPILOG.append(
        'To be able resolve hostnames and IP addresses, please install\n'
        'dnspython, available from www.dnspython.org. Some Linux distros\n'
        'have this available as python-dnspython or python3-dnspython.'
    )

# http://gurno.com/adam/mne/
WORDS = """
zip ace act add age aim air and ant ape arm art ash ask bad bag
ban bar bat bay bed bet bid big bin bit bog boo box bud bug bun
bus cab can cap car cat cop cot cow cry cub cup cut day den did
die dig dim dip dog dry dub dud dug ear eat eel egg elf elk elm
end fan far fat fed few fib fig fin fit fix fly fog foo fox fry
fun gab gag gap gas gel gem get gin got gum gut had has hat hen
hex hid hip hit hog hop hot how hub hug hum hut ice ill imp ink
irk jab jam jar jaw jet jig job jog jot joy key kid kin kit lab
lag lap law lax lay leg let lid lip lit lot low mad map mat men
met mix mob moo mop mud mug nab nag nap net new nil nip nod nor
now nut oak oat odd off old orb out owl own pad pal pan pay pen
pet pie pig pin pit ply pod pop pot pox pry pun pup put rag ran
rat raw red rid rig rip rot row rub rug run rut rye sad sag sap
sat saw say set shy sip sit ski sky sly sob soy spa spy tab tag
tan tap tar tax the tie tin tip top toy try tub tug use van vat
vex vow wag war was wax web wet who wig win wit yes yet zoo all
""".split()

MNEMONICS = {key: val for (key, val) in enumerate(WORDS)}
MNEMONICS.update({val: key for (key, val) in enumerate(WORDS)})

LOCALHOST = ipaddress.ip_address('127.0.0.1')


def name2idna(name):
    """Convert a UTF-8 hostname to IDNA"""
    return name.lower().encode('idna').decode('utf-8')


def die(message=None):
    """Exit gracefully"""
    if message:
        print(message, file=sys.stderr)
    sys.exit(1 if message else 0)


def debug(head, data=None):
    """Possibly pretty print an object to stderr"""
    if DEBUG:
        pprint(head if data is None else {head: data}, stream=sys.stderr)


def str2ip(addr):
    """Convert a string to an IP address object"""
    try:
        result = ipaddress.ip_address(
            int(addr) if addr.isdigit() else addr
        )
    except ValueError as error:
        die(error)

    return result


def resolve(query, rrtype):
    """Resolve a DNS query"""
    answer = None

    try:
        answer = resolver.query(query, rrtype)
    except resolver.NXDOMAIN:
        pass
    # Fsck pylint, we can't include all exceptions from dnspython
    except Exception:
        pass

    if not answer:
        return set()

    return {str(result).lower().rstrip('.') for result in answer.rrset}


def dnsname(ipv4):
    """Get rDNS for an IPv4 address"""
    if ipv4 == LOCALHOST:
        return {'localhost'}

    if False in (HAS_DNS, USE_DNS):
        return set()

    answer = resolve(ipv4.reverse_pointer, 'PTR')

    return {result for result in answer if result}


def dnsipv4(host):
    """Get the IPv4 address(es) for a hostname"""
    if host in {'localhost'}:
        return {LOCALHOST}

    if not HAS_DNS:
        error = 'Cannot resolve ‘{}’: dnspython not installed'.format(host)
        die(error)

    if not USE_DNS:
        error = 'Cannot resolve ‘{}’: DNS lookups are disabled'.format(host)
        die(error)

    answer = resolve(host, 'A')

    return {str2ip(addr) for addr in answer if addr}


def is_ipv4(addr):
    """Check that a string is a valid IPv4 representation"""
    try:
        ipv4 = ipaddress.ip_address(
            int(addr) if addr.isdigit() else addr
        )
    except ValueError:
        return False

    version = ipv4.version
    if version != 4:
        address = ipv4.compressed
        die('IPv{} addresses not supported: {}'.format(version, address))

    return True


def is_mnemonic(mnemonic, separator='-'):
    """Check that we have a valid mnemonic"""
    if len(mnemonic) != 15:
        return False
    if mnemonic.count(separator) != 3:
        return False

    words = mnemonic.split(separator)

    for word in words:
        if word not in MNEMONICS:
            return False

    return True


def is_label(label):
    """Make sure that we have a valid label"""
    length = len(label)

    if length < 1 or length > 63:
        return False

    # For 1-character labels the same character will be checked
    # twice. We can live with that.
    if not label[0].isalnum() or not label[-1].isalnum():
        return False

    for character in label:
        if not character.isalnum() and character not in {'.', '-'}:
            return False

    return True


def is_hostname(name):
    """Check that we have a hostname"""
    if name in {'localhost'}:
        return True

    # See https://en.wikipedia.org/wiki/Hostname
    host = name2idna(name.rstrip('.'))
    length = len(host)

    if length < 1 or length > 253:
        return False

    labels = host.split('.')

    for label in labels:
        if not is_label(label):
            return False

    return True


def ip2mne(ipv4):
    """Convert an IPv4 address to a mnemonic"""
    elements = map(int, ipv4.compressed.split('.'))
    octets = (MNEMONICS[element] for element in elements)

    return '-'.join(octets)


def mne2ip(mnemonic):
    """Translate a mnemonic into its IPv4 address"""
    words = mnemonic.split('-')
    octets = (MNEMONICS[word] for word in words)

    return str2ip('{}.{}.{}.{}'.format(*octets))


def lookup(word):
    """Find the missing parts…"""
    if is_ipv4(word):
        ipv4 = str2ip(word)
        addresses = {ipv4}
        hostnames = dnsname(ipv4)
    elif is_mnemonic(word):
        ipv4 = mne2ip(word)
        addresses = {ipv4}
        hostnames = dnsname(ipv4)
    elif is_hostname(word):
        addresses = dnsipv4(word)
        hostnames = {word}
    else:
        die('Cannot determine type of argument: {}'.format(word))

    debug('addresses', addresses)
    debug('hostnames', hostnames)

    result = set()

    for ipv4 in addresses:
        for name in hostnames or {None}:
            result.add((ipv4, name or ''))

    return result


def read_stdin():
    """Split anything on standard input into lowercase words"""
    try:
        words = sys.stdin.read().lower().split()
    except KeyboardInterrupt:
        die()
    except (UnicodeDecodeError, UnicodeEncodeError) as error:
        die(error)
    except (OSError, IOError) as error:
        # We really ought to deuglify this
        die(error)

    return words


def get_template(fmtstr, showhost):
    """Return the proper formatting string"""
    if fmtstr is not None:
        return fmtstr
    if showhost:
        return '{ipv4}\t{mnemonic}\t{hostname}'
    return '{ipv4}\t{mnemonic}'


def main(progname=__whoami__):
    """Main entry point"""
    global USE_DNS

    debug('dict', MNEMONICS)
    debug('argv', sys.argv)

    parser = argparse.ArgumentParser(
        prog=progname,
        formatter_class=argparse.RawTextHelpFormatter,
        epilog='\n\n'.join(EPILOG)
    )
    parser.add_argument('-v', '--version', action='version',
                        version='%(prog)s/{}'.format(__version__),
                        help='show version information and exit')
    parser.add_argument('-c', '--copyright', action='version',
                        version=__copyright__,
                        help='show copying policy and exit')
    if HAS_DNS:
        parser.add_argument(
            '-N', '--no-dns',
            action='store_true',
            help='do not resolve hostnames and IP addresses'
        )
    parser.add_argument('-S', '--no-sort', action='store_true',
                        help='do not sort output by IP address')
    parser.add_argument('-f', '--format', help=HELP_FMT)
    parser.add_argument('ARG', nargs='*', help=HELP_ARG)

    args = parser.parse_args()
    debug('args', args)

    if HAS_DNS:
        if args.no_dns:
            USE_DNS = False

    cache = {None}
    results = set()
    words = [arg.lower() for arg in args.ARG] if args.ARG else read_stdin()

    for word in set(words):
        results.update(lookup(word))

    for (ipv4, hostname) in results if args.no_sort else sorted(results):
        if ipv4 in cache:
            continue
        cache.add(ipv4)
        template = get_template(args.format, USE_DNS and hostname)
        try:
            result = template.format(
                ipv4=ipv4,
                mnemonic=ip2mne(ipv4),
                hostname=hostname
            )
        except KeyError as error:
            holder = str(error).strip("'")
            error = 'Invalid placeholder: {{{}}}'.format(holder)
            print(error, file=sys.stderr)
            ctrls = get_template(None, HAS_DNS).replace('\t', ', ')
            error = 'Possible values are: {}'.format(ctrls)
            die(error)
        print(result)

    return 0


if __name__ == '__main__':
    sys.exit(main(pathlib.Path(sys.argv[0]).name))

# eof
